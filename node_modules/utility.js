var fs=require('fs');
var util=require('util');
util.fs = fs;
util.urlify = function (url) {
        return url.replace(/[\/]+/g, '/').replace(/[\\]+/g,'\\').replace(/[\/]$/, '').replace(/[\\]$/, '').replace(':/', '://');
    };
util.readSync = function (path) {
        if (fs.existsSync(path)) {
            return fs.readFileSync(path, 'utf8');
        } else { return "" }
    };
util.read = function (path,callback) {
        fs.exists(path, function (exists) {
            if (exists) {
                fs.readFile(path, 'utf8', function (err, data) {
                    if (err) { if (typeof callback == 'function') { callback(false) } }
                    else { if (typeof callback == 'function') { callback(data) } }
                });
            } else { if (typeof callback == 'function') { callback(false) } }
        });
    };
util.findMethod = function (root, methods,nextCall) {
    var func = root || {},
    meth = methods.clean();
    for (var i = 0; i < meth.length; i++) {
        if (typeof func[meth[i]] == 'function') {
            func = func[meth[i]];
        } else {
            if(nextCall){
                return function (req, res,next) { console.log('404-no-handler');next()}
            }  else{
                return function (req, res) { console.log('404', root);res.send('404-no-handler');}
            }
        }
    }
    if (typeof func == 'function') { return func }
}
util.getMethod= function (controllerPath,nextCall) {
    var me=this;
    var trimPath = me.urlify(controllerPath.replace('.js', ''));
    var funcPart=trimPath.match(/[.\w- ]+$/);
    if(funcPart){
        funcPart=funcPart[0];
        var cont=funcPart.substring(0,funcPart.indexOf('.'));
        lastSl=trimPath.lastIndexOf('\\');
        if(lastSl == -1){lastSl=trimPath.lastIndexOf('/')}
        var controller=trimPath.substring(0,lastSl)+'/'+cont;
        var func = funcPart.substring(funcPart.indexOf('.') + 1, funcPart.length);
        if(controller.substr(-3).toLowerCase()!=".js"){controller+='.js'}
        if (me.exist(controller)) {
            try {
                var load = require(controller);
            } catch (e) { throw e}
            try{return me.findMethod(load, func.split('.'),true)}
            catch(e){
                return function(req,res,next){
                    var nc=nextCall;
                    if(nc){
                        console.log('function do not found');
                        next();
                    }else{
                        //error(req,res,next,e);
                        throw e;
                    }
                }
            }
        } else {
            return function (req, res,next) {
                var nc=nextCall;
                if(nc){
                    console.log('function do not found');
                    next();
                }else{
                    res.send(404,'404-no-controller-found '+controller)   ;
                }
            }
        }
    }
}
var dataType=util.dataType = function (arg) {
    if (arg == undefined) { return 'undefined' }
    else if (arg == null) { return 'null' }
    else if (Object.prototype.toString.call(arg) == "[object Array]") { return 'array' }
    else if (Object.prototype.toString.call(arg) == "[object Object]") { return 'object' }
    else if (Object.prototype.toString.call(arg) == "[object Number]" || (isNaN(arg) == false && arg != "")) { return 'number' }
    else if (Object.prototype.toString.call(arg) == "[object String]") { return 'string' }
    else{return 'unknown'}
}
util.mix = function (a, b) {
    var me=this;
    if (typeof a == 'object' && typeof b == 'object') {
        var x = me.clone(a);
        for (var i in b) {
            x[i] = b[i]
        }
        return x;
    }
}
util.clone=function(obj){
    var a={};
    for(var i in obj){
        a[i]=obj[i];
    }
    return a;
}
util.paramToJSON=function(par){
    var x=par.split('&');
    var rez={};
    for(var i=0;i< x.length;i++){
        var z=x[i].split('=');
        if(z.length>1){
            rez[z[0]]=z[1];
        }
    }
    return rez;
}
util.paramify=function(obj){
    var me=this;
    var x=me.param(obj,true);
    return me.paramToJSON(x);
}
util.param = function (a,unEncoded) {
    var me=this;
    var s = [],
        prefix,
        r20 = /%20/g,
        add = function (key, value) {
            value = (value == null ? "" : value);
            if(unEncoded){s[s.length] = key + "=" + value}
            else{s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent( value );}
        };

    if (me.dataType(a) == 'object') {
        for (var prefix in a) { buildParams(prefix, a[prefix], add) }
    } else {
        var x = JSON.parse(a);
        for (var prefix in x) { buildParams(prefix, x[prefix], add) }
    }
    return s.join("&").replace(r20, "+");
}
var buildParams = function (prefix, obj, add) {
    var rbracket = /\[\]$/;
    if (dataType(obj) == 'array') {
        for (var j = 0; j < obj.length; j++) {
            if (rbracket.test(prefix)) { add(prefix, obj[j]) }
            else { buildParams(prefix + '[' + (isNaN(j) ? j : '') + ']', obj[j], add) }
        }
    }
    else if (dataType(obj)== "object" ) {
        for ( name in obj ) {
            buildParams( prefix + "[" + name + "]", obj[ name ], add );
        }
    }else { add(prefix, obj) }
}
util.random = function () {
    return Math.floor(Math.random() * 123456789);
}
util.emptyJSON = function (obj) {
    for (var i in obj) { return false; }
    return true;
}
util.notEmptyJSON = function (obj) {
    for (var i in obj) { return true; }
    return false;
}
util.isFile = function (path, callback) {
    var me=this;
    path = me.urlify(path);
    fs.exists(path, function (exist) {
        if (exist) { callback(fs.statSync(path).isFile(), path) }
        else { callback(false, path) }
    });
}
util.isFileSync = function (path) {
    var me=this;
    path = me.urlify(path);
    if (me.exist(path)) {
        return fs.statSync(path).isFile();
    } else { return false }
}
util.exist = function (path) {
    var me=this;
    path = me.urlify(path);
    return fs.existsSync(path);
}
util.isFolder = function (path, callback) {
    var me=this;
    path = me.urlify(path);
    fs.exists(path, function (exist) {
        if (exist) { callback(fs.statSync(path).isDirectory(), path) }
        else { callback(false, path) }
    });
}
util.isFolderSync = function (path) {
    var me=this;
    path = me.urlify(path);
    if (me.exist(path)) {
        return fs.statSync(path).isDirectory();
    } else { return false }
}
util.objectEach = function (obj, callback) {
    var j= 0,len=null;
    if(typeof Object.keys!=='undefined'){
       len=Object.keys(obj).length;
    }
    if(typeof callback=='function'){
        if (typeof callback == 'function') {
            for (var i in obj) {
                callback(obj[i],i,j,(j+1==len),len);
                j=j+1;
            }
        }
    }
}
util.each=function(obj,cb){
    var me=this;
    if(typeof cb=='function'){
        if(me.isArray(obj)){
            for(var i= 0,j=obj.length;i<j;i++){
                cb(obj[i],i,(i+1==j),j);
            }
        }else if(me.dataType(obj)=='object'){
            me.objectEach(obj,cb);
        }
    }
}

module.exports=util;
//------------------------------------------------------------------------------------------------------------------//


Array.prototype.each=function(callback){
  if(this.length>0){
      if(typeof callback=='function'){
        for(var i=0;i<this.length;i++){
          callback(this[i]);
        }
      }
  }
  return this;
};
Array.prototype.clean=function(){
  if(this.length>0){
    for(var i=0;i<this.length;i++){
      if(this[i]=='' || this[i]==null || this[i]==undefined){
        this.splice(i,1);
        i-=1;
      }
    }
  }
  return this;
};
Array.prototype.check=function(str,caseSense){
  if(this.length>0){
    for(var i=0;i<this.length;i++){
      if(caseSense){
        var item =(this[i].length>0?this[i].toLowerCase():this[i]);
        str=(str.length>0?str.toLowerCase():str);
      }else{item=this[i]}
      if(str==item){return true}
    }
  }
  return false;
};
//-----------------------------------------------------------------------------------------------------------------//